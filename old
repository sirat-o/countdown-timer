<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Countdown Timer</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

  /* Variables */
  :root {
    --primary-bg: linear-gradient(135deg, #1f2937, #111827);
    --time-box-bg: rgba(255, 255, 255, 0.08);
    --text-primary: #f3f4f6;
    --text-secondary: #9ca3af;
    --accent-color: #818cf8;
    --danger-color: #ef4444;
    --success-color: #10b981;
    --border-radius: 16px;
    --box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --input-bg: rgba(255, 255, 255, 0.05);
    --input-border: rgba(255, 255, 255, 0.1);
  }

  /* Reset & Base Styles */
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body {
    font-family: 'Inter', sans-serif;
    min-height: 100vh;
    background: var(--primary-bg);
    color: var(--text-primary);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 2rem;
    line-height: 1.5;
  }

  /* Typography */
  h1 {
    font-size: clamp(2rem, 5vw, 3.5rem);
    font-weight: 700;
    margin-bottom: 1.5rem;
    background: linear-gradient(to right, #e0e7ff, #a5b4fc);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    text-align: center;
    letter-spacing: -0.025em;
  }

  /* Improved Input Section */
  .input-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 2rem;
    width: 100%;
    max-width: 500px;
    transition: var(--transition);
    position: relative;
    text-align: center;
  }

  label {
    font-size: 1.1rem;
    color: var(--text-secondary);
    margin-bottom: 0.75rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    justify-content: center;
  }

  label svg {
    width: 1.25rem;
    height: 1.25rem;
    color: var(--accent-color);
  }

  .input-wrapper {
    position: relative;
    width: 100%;
    display: flex;
    justify-content: center;
  }

  input[type="datetime-local"] {
    font-family: inherit;
    font-size: 1rem;
    font-weight: 500;
    padding: 12px 16px;
    border-radius: var(--border-radius);
    border: 1px solid var(--input-border);
    background: var(--input-bg);
    color: var(--text-primary);
    width: 100%;
    max-width: 300px;
    outline: none;
    transition: var(--transition);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    box-shadow: var(--box-shadow);
    appearance: none;
    text-align: center;
  }

  input[type="datetime-local"]:focus {
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(129, 140, 248, 0.3);
    background: rgba(255, 255, 255, 0.08);
  }

  .calendar-icon {
    position: absolute;
    left: 50%;
    transform: translateX(calc(-150px - 1.5rem)); /* Half of max-width + padding */
    top: 50%;
    transform: translateY(-50%);
    width: 1.5rem;
    height: 1.5rem;
    color: var(--text-secondary);
    pointer-events: none;
    z-index: 1;
  }

  input[type="datetime-local"]:focus ~ .calendar-icon {
    color: var(--accent-color);
  }

  .input-hint {
    font-size: 0.8rem;
    color: var(--text-secondary);
    margin-top: 0.5rem;
    opacity: 0.7;
    text-align: center;
    font-weight: 00;
    width: 100%;
    max-width: 500px;
    margin: 0.5rem auto 0;
  }

  /* Countdown Display */
  #countdown {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
    margin: 2rem 0;
    width: 100%;
    max-width: 800px;
  }

  .time-box {
    background: var(--time-box-bg);
    border-radius: var(--border-radius);
    padding: 1.5rem 1rem;
    text-align: center;
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    box-shadow: var(--box-shadow);
    transition: var(--transition);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .time-box:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.12);
  }

  .number {
    font-size: clamp(2.5rem, 8vw, 4.5rem);
    font-weight: 700;
    color: var(--text-primary);
    line-height: 1;
    margin-bottom: 0.5rem;
    font-feature-settings: "tnum";
    font-variant-numeric: tabular-nums;
  }

  .label {
    font-size: 0.9rem;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.1em;
    font-weight: 600;
  }

  /* Reset Button */
  #reset-btn {
    margin-top: 2.5rem;
    background: var(--danger-color);
    color: white;
    border: none;
    font-size: 1rem;
    font-weight: 600;
    padding: 0.875rem 2.5rem;
    border-radius: 50px;
    cursor: pointer;
    transition: var(--transition);
    box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
    position: relative;
    overflow: hidden;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  #reset-btn:hover {
    background: #dc2626;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
  }

  #reset-btn:active {
    transform: translateY(0);
  }

  #reset-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: 0.5s;
  }

  #reset-btn:hover::before {
    left: 100%;
  }

  /* Footer */
  footer {
    margin-top: 3rem;
    font-size: 0.875rem;
    color: var(--text-secondary);
    text-align: center;
  }

  /* Toast Notification */
  .toast {
    position: fixed;
    top: 1.5rem;
    right: 1.5rem;
    background: rgba(31, 41, 55, 0.9);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    transform: translateX(150%);
    transition: transform 0.3s ease-out;
    z-index: 1000;
    max-width: 350px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .toast.show {
    transform: translateX(0);
  }

  .toast::before {
    content: '';
    display: block;
    width: 1.5rem;
    height: 1.5rem;
    background-color: var(--success-color);
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M22 11.08V12a10 10 0 1 1-5.93-9.14'%3E%3C/path%3E%3Cpolyline points='22 4 12 14.01 9 11.01'%3E%3C/polyline%3E%3C/svg%3E");
    mask-repeat: no-repeat;
    mask-position: center;
    flex-shrink: 0;
  }

  .toast-message {
    font-size: 0.9375rem;
  }

  .toast-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 3px;
    background: var(--success-color);
    border-radius: 0 0 0 var(--border-radius);
    animation: toastProgress 3s linear forwards;
  }

  @keyframes toastProgress {
    0% { width: 100%; }
    100% { width: 0%; }
  }

  /* Hidden State */
  .hidden {
    opacity: 0;
    height: 0;
    margin: 0;
    pointer-events: none;
    transform: translateY(-20px);
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    body {
      padding: 1.5rem;
    }

    #countdown {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .time-box {
      padding: 1.25rem 0.75rem;
    }

    .toast {
      top: 1rem;
      right: 1rem;
      left: 1rem;
      max-width: calc(100% - 2rem);
    }

    .calendar-icon {
      transform: translateX(calc(-50% - 1.5rem));
    }
  }

  @media (max-width: 480px) {
    h1 {
      font-size: 1.75rem;
      margin-bottom: 1rem;
    }

    .input-container {
      margin-bottom: 1.5rem;
    }

    input[type="datetime-local"] {
      padding: 0.875rem 1rem;
      max-width: 260px;
    }

    .calendar-icon {
      transform: translateX(calc(-130px - 1rem));
    }

    #countdown {
      grid-template-columns: 1fr 1fr;
      gap: 0.75rem;
    }

    .number {
      font-size: 2rem;
    }

    .label {
      font-size: 0.75rem;
    }

    #reset-btn {
      margin-top: 2rem;
      padding: 0.75rem 1.75rem;
      font-size: 0.9375rem;
    }

    footer {
      margin-top: 2rem;
    }
  }

  /* Animation for countdown completion */
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  .time-up {
    animation: pulse 1s infinite;
  }
</style>
</head>
<body>
  <h1>Countdown Timer</h1>
  <div class="input-container" id="input-container">
    <label for="target-date">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
        <line x1="16" y1="2" x2="16" y2="6"></line>
        <line x1="8" y1="2" x2="8" y2="6"></line>
        <line x1="3" y1="10" x2="21" y2="10"></line>
      </svg>
      Select Target Date & Time
    </label>
    <div class="input-wrapper">
      <input type="datetime-local" id="target-date" />
    </div>
    <p class="input-hint">Choose a future date and time to start the countdown</p>
  </div>

  <div id="countdown" aria-live="polite" aria-atomic="true">
    <div class="time-box" aria-label="Days">
      <div class="number" id="days">00</div>
      <div class="label">Days</div>
    </div>
    <div class="time-box" aria-label="Hours">
      <div class="number" id="hours">00</div>
      <div class="label">Hours</div>
    </div>
    <div class="time-box" aria-label="Minutes">
      <div class="number" id="minutes">00</div>
      <div class="label">Minutes</div>
    </div>
    <div class="time-box" aria-label="Seconds">
      <div class="number" id="seconds">00</div>
      <div class="label">Seconds</div>
    </div>
  </div>

  <button id="reset-btn">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
      <path d="M3 3v5h5"></path>
    </svg>
    Reset
  </button>

  <footer>Made with ❤️</footer>

  <!-- Toast notification -->
  <div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-message"></div>
    <div class="toast-progress"></div>
  </div>

<script>
  const inputContainer = document.getElementById('input-container');
  const input = document.getElementById('target-date');
  const daysEl = document.getElementById('days');
  const hoursEl = document.getElementById('hours');
  const minutesEl = document.getElementById('minutes');
  const secondsEl = document.getElementById('seconds');
  const resetBtn = document.getElementById('reset-btn');
  const countdownEl = document.getElementById('countdown');
  const toast = document.getElementById('toast');
  const toastMessage = document.querySelector('.toast-message');

  const STORAGE_KEY = 'stylishCountdownTarget';

  let countdownInterval = null;

  // Show toast notification
  function showToast(message, type = 'success') {
    toastMessage.textContent = message;
    
    // Update toast style based on type
    if (type === 'error') {
      toast.style.background = 'rgba(239, 68, 68, 0.9)';
      document.querySelector('.toast-progress').style.background = '#fef2f2';
    } else {
      toast.style.background = 'rgba(31, 41, 55, 0.9)';
      document.querySelector('.toast-progress').style.background = 'var(--success-color)';
    }
    
    toast.classList.add('show');
    
    // Reset progress bar animation
    const progress = document.querySelector('.toast-progress');
    progress.style.animation = 'none';
    void progress.offsetWidth; // Trigger reflow
    progress.style.animation = 'toastProgress 3s linear forwards';
    
    setTimeout(() => {
      toast.classList.remove('show');
    }, 3000);
  }

  function updateCountdown() {
    const target = localStorage.getItem(STORAGE_KEY);
    if (!target) {
      clearCountdownDisplay();
      return;
    }

    const targetTime = new Date(target).getTime();
    const now = Date.now();
    let diff = targetTime - now;

    if (diff <= 0) {
      clearInterval(countdownInterval);
      countdownInterval = null;
      showTimeUp();
      inputContainer.classList.remove('hidden');
      return;
    }

    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    diff -= days * (1000 * 60 * 60 * 24);

    const hours = Math.floor(diff / (1000 * 60 * 60));
    diff -= hours * (1000 * 60 * 60);

    const minutes = Math.floor(diff / (1000 * 60));
    diff -= minutes * (1000 * 60);

    const seconds = Math.floor(diff / 1000);

    daysEl.textContent = days.toString().padStart(2, '0');
    hoursEl.textContent = hours.toString().padStart(2, '0');
    minutesEl.textContent = minutes.toString().padStart(2, '0');
    secondsEl.textContent = seconds.toString().padStart(2, '0');
  }

  function clearCountdownDisplay() {
    daysEl.textContent = '00';
    hoursEl.textContent = '00';
    minutesEl.textContent = '00';
    secondsEl.textContent = '00';
    countdownEl.classList.remove('time-up');
  }

  function showTimeUp() {
    daysEl.textContent = '00';
    hoursEl.textContent = '00';
    minutesEl.textContent = '00';
    secondsEl.textContent = '00';
    countdownEl.classList.add('time-up');
    showToast('🎉 Time is up!', 'success');
  }

  // Load saved target date on page load
  function loadSavedDate() {
    const saved = localStorage.getItem(STORAGE_KEY);
    if (saved) {
      input.value = saved.slice(0,16); // "YYYY-MM-DDTHH:mm"
      startCountdown();
      inputContainer.classList.add('hidden');
      showToast('Countdown resumed from saved time');
    }
  }

  // Start countdown timer interval
  function startCountdown() {
    if (countdownInterval) clearInterval(countdownInterval);
    updateCountdown();
    countdownInterval = setInterval(updateCountdown, 1000);
    showToast('Countdown started!', 'success');
  }

  // When user selects a date/time
  input.addEventListener('change', () => {
    if (!input.value) {
      localStorage.removeItem(STORAGE_KEY);
      clearCountdownDisplay();
      if (countdownInterval) {
        clearInterval(countdownInterval);
        countdownInterval = null;
      }
      showToast('Countdown cleared', 'error');
      return;
    }
    
    // Validate future date
    const selectedDate = new Date(input.value);
    if (selectedDate < new Date()) {
      showToast('Please select a future date and time', 'error');
      input.value = '';
      return;
    }
    
    localStorage.setItem(STORAGE_KEY, input.value);
    inputContainer.classList.add('hidden');
    startCountdown();
  });

  // Reset button clears saved date and display
  resetBtn.addEventListener('click', () => {
    localStorage.removeItem(STORAGE_KEY);
    input.value = '';
    clearCountdownDisplay();
    inputContainer.classList.remove('hidden');
    if (countdownInterval) {
      clearInterval(countdownInterval);
      countdownInterval = null;
    }
    showToast('Countdown has been reset', 'error');
  });

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    // Set minimum datetime to now
    const now = new Date();
    const timezoneOffset = now.getTimezoneOffset() * 60000;
    const localISOTime = new Date(now - timezoneOffset).toISOString().slice(0, 16);
    input.min = localISOTime;
    
    loadSavedDate();
  });
</script>
</body>
</html>
